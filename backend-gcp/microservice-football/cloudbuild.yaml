# cloudbuild.yaml (version locale optimisée)
# Ce fichier doit être placé dans le répertoire racine de votre projet.

steps:
  # Étape 1: Construire l'image Docker
  # Cloud Build exécute les commandes du Dockerfile qui se trouve dans le répertoire spécifié.
  # Cela inclut la copie des sources, l'installation des dépendances (npm install) et la compilation.
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/oracle-prediction-football:$COMMIT_SHA', '.']
    dir: 'backend-gcp/microservice-football'

  # Étape 2: Pousser l'image vers Google Container Registry (GCR)
  # L'image construite est stockée dans un registre privé pour être utilisée par Cloud Run.
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/oracle-prediction-football:$COMMIT_SHA']

  # Étape 3: Déployer une nouvelle révision sur Cloud Run
  # La nouvelle image est déployée en tant que nouvelle version du service,
  # garantissant un déploiement sans interruption de service.
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'oracle-prediction-football' # Le nom de votre service Cloud Run
      - '--image'
      - 'gcr.io/$PROJECT_ID/oracle-prediction-football:$COMMIT_SHA'
      - '--region'
      - 'europe-west1' # Adaptez si votre région est différente
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated' # Nécessaire pour que API Gateway puisse atteindre le service

# Spécifie quelle image doit être conservée après le build.
images:
  - 'gcr.io/$PROJECT_ID/oracle-prediction-football:$COMMIT_SHA'

# Options de journalisation pour le build.
options:
  logging: CLOUD_LOGGING_ONLY